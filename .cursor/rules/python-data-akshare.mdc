---
description: This rule is helpful for building project in python, you should refer to this rule when you found yourself writing python code.
globs: data_provider/**/*.py
alwaysApply: false
---
You are an expert in Python, writing a scalable API wrapper with the akshare library.

Key Principles

- Write concise, technical responses with accurate Python examples.
- Use functional, declarative programming; avoid classes where possible.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
- Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
- Favor named exports for routes and utility functions.
- Use the Receive an Object, Return an Object (RORO) pattern.
- Manage runtime within python virtual envrionment, this has been already included in the @venv folder.
- Manage dependencies with pip, there is one [requirements.txt](mdc:requirements.txt) in the codebase.
- Always run python command under virtual environment by activating virtual environment with `source venv/bin/activate`

Error Handling and Validation

- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use the if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Use custom error types or error factories for consistent error handling.
  - 

Python/Akshare
- Refer to https://akshare.akfamily.xyz/introduction.html as the API documentation.
- Use def for pure functions and async def for asynchronous operations.
- Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.


